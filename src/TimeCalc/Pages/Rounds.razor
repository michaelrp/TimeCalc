@page "/rounds"
@using TimeCalc.Components.Rounds
@inject ILocalStorage Store

<h4 class="page-header">Rounds</h4>

@if(puzzleRounds != null && puzzleRounds.Count > 0)
{
    <ul class="list-group">
        @foreach (var puzzleRound in puzzleRounds)
        {
            <li class="list-group-item d-flex">
                <NavLink href=@GetRoundHref(puzzleRound.Id) title="View round details" class="text-decoration-none text-reset me-auto">
                    <span class="align-top @CubeIcons.Css(puzzleRound.Puzzle)"></span> @GetPuzzleDisplay(puzzleRound)
                </NavLink>
                <div role="button" @onclick="@(e => DeletePuzzleRound(e, puzzleRound.Id))"><span class="align-middle oi oi-trash"></span></div>
            </li>
        }
    </ul>
}
else
{
    <p>No rounds</p>
}

<div class="mt-2">
    <AddRound OnPuzzleRoundAdded="@PuzzleRoundAddedHandler" />
</div>

@code {
    private List<PuzzleRound> puzzleRounds;

    protected override async Task OnInitializedAsync()
    {
        puzzleRounds = await Store.GetPuzzleRoundsAsync();
        if(puzzleRounds == null)
        {
            puzzleRounds = new List<PuzzleRound>();
        }
    }

    private async Task DeletePuzzleRound(MouseEventArgs e, string id)
    {
        var pr = puzzleRounds.FirstOrDefault(pz => pz.Id == id);
        puzzleRounds.Remove(pr);
        await Store.SavePuzzleRounds(puzzleRounds);
    }

    private string GetPuzzleDisplay(PuzzleRound puzzleRound)
        => string.IsNullOrEmpty(puzzleRound.Name)
            ? puzzleRound.Puzzle
            : puzzleRound.Puzzle + " - " + puzzleRound.Name;

    private string GetRoundHref(string id) => $"rounds/{id}";

    private async Task PuzzleRoundAddedHandler(PuzzleRound pr)
    {
        puzzleRounds.Add(pr);
        await Store.SavePuzzleRounds(puzzleRounds);
    }
}