@page "/rounds"
@using TimeCalc.Components.Rounds
@inject ILocalStorage Store
@inject ISolveCalculator Calculator

<h4 class="page-header">Rounds</h4>

@if (HasRounds())
{
    <ul class="list-group">
    @foreach (var puzzleRound in puzzleRounds)
        {
            <li class="list-group-item d-flex">
                <NavLink href=@GetRoundHref(puzzleRound.Id) title="View round details"
                        class="text-decoration-none text-reset flex-fill d-flex">
                    <div class="flex-grow-1">
                        <span class="align-top @CubeIcons.Css(puzzleRound.Puzzle)"></span> @GetPuzzleDisplay(puzzleRound)
                    </div>
                    <div>@GetPuzzleAvg(puzzleRound)</div>
                </NavLink>
                <div role="button" class="ms-3" @onclick="@(e => DeletePuzzleRound(e, puzzleRound.Id))">
                    <span class="oi oi-trash"></span>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>No rounds</p>
}

<div class="mt-2">
    <AddRound OnPuzzleRoundAdded="@PuzzleRoundAddedHandler" />
</div>

@code {
    private List<PuzzleRound> puzzleRounds;

    protected override async Task OnInitializedAsync()
    {
        puzzleRounds = await Store.GetPuzzleRoundsAsync();
        if (puzzleRounds == null)
        {
            puzzleRounds = new List<PuzzleRound>();
        }
    }

    private bool HasRounds()
        => puzzleRounds != null && puzzleRounds.Count > 0;

    private async Task DeletePuzzleRound(MouseEventArgs e, string id)
    {
        var pr = puzzleRounds.FirstOrDefault(pz => pz.Id == id);
        puzzleRounds.Remove(pr);
        await Store.SavePuzzleRounds(puzzleRounds);
    }

    private string GetPuzzleDisplay(PuzzleRound puzzleRound)
        => string.IsNullOrEmpty(puzzleRound.Name)
            ? puzzleRound.Puzzle
            : puzzleRound.Puzzle + " - " + puzzleRound.Name;

    private string GetPuzzleAvg(PuzzleRound puzzleRound)
        => Calculator.GetCalculations(puzzleRound.Solves, "").CurrentAverage;

    private string GetRoundHref(string id)
        => $"rounds/{id}";

    private async Task PuzzleRoundAddedHandler(PuzzleRound pr)
    {
        puzzleRounds.Add(pr);
        await Store.SavePuzzleRounds(puzzleRounds);
    }
}