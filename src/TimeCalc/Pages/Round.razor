@page "/rounds/{id}"
@using TimeCalc.Components.Rounds
@inject ILocalStorage Store
@inject ISolveCalculator Calculator

<h4 class="page-header d-flex">
    <NavLink href="rounds" title="Back to rounds" class="text-decoration-none text-reset me-auto">
        <span class="oi oi-chevron-left mr-3"></span>
        <span class="align-top @cubeIcon"></span> @roundTitle
    </NavLink>
    <NavLink href="@smsHref" title="Share" class="text-decoration-none text-reset">
        <span class="oi oi-share"></span>
    </NavLink>
</h4>

<ModalStopwatch @ref="Stopwatch" OnSolveUpdated="@SolveUpdatedHandler"></ModalStopwatch>

@if(puzzleRound != null)
{
    <table class="table table-borderless">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Solve</th>
                <th scope="col">DNF</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var solve in puzzleRound.Solves)
        {
            <tr class="@GetInclusionClass(solve.Number)">
                <td class="align-middle">@solve.Number</td>
                <td>
                    <div class="input-group">
                        <input class="form-control time-entry" type="text" pattern="[0-9]*" value="@solve.Result" @oninput="@(e => SolveInput(e, solve.Number))">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" @onclick="() => Stopwatch.Open(solve.Number, solve.Result)"><span class="oi oi-timer"></span></button>
                        </div>
                    </div>
                </td>
                <td class="align-middle"><input type="checkbox" value="@solve.IsDNF"></td>
            </tr>
        }
        </tbody>
    </table>

    <hr />
    <h5>@GetAverageLabel()</h5>
    <div class="form-group">
        <div>
            <strong>Live:</strong><span class="p-1 @(GetCurrentAvgClass())">@calculations.CurrentAverage</span>
            <strong>For PB:</strong><span class="p-1">@calculations.NeededForNewPB</span>
            <strong>BPA:</strong><span class="p-1">@calculations.BestPossibleAverage</span>
        </div>
    </div>
    <h5 class="mt-3">Current PBs</h5>
    <div class="form-group">
        <div>
            @if(currentPb != null)
            {
                <strong>Single:</strong><span class="p-1">@currentPb.Single</span>
                <strong>Average:</strong><span class="p-1">@currentPb.Average</span>
            }
            else
            {
                <div>No personal bests for @puzzleRound.Puzzle</div>
            }
        </div>
    </div>
}

<span></span>

@code {
    [Parameter]
    public string Id { get; set; }
    private ModalStopwatch Stopwatch { get; set; }
    private PuzzleRound puzzleRound;
    private SolveCalculations calculations;
    private PersonalBest currentPb;
    private string currentPbAverage;
    private string roundTitle;
    private string cubeIcon;
    private string smsHref;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        puzzleRound = await Store.GetPuzzleRoundAsync(Id);
        currentPb = await GetCurrentPbForPuzzle(puzzleRound.Puzzle);
        currentPbAverage = currentPb == null ? "" : currentPb.Average;
        calculations = Calculator.GetCalculations(puzzleRound.Solves, currentPbAverage);
        roundTitle = $"{puzzleRound.Puzzle} - {puzzleRound.Name}";
        cubeIcon = CubeIcons.Css(puzzleRound.Puzzle);
        smsHref = GetEncodedBody();
    }

    private async Task SolveInput(ChangeEventArgs e, int number)
    {
        var formattedValue = string.Format(new SolveTimeFormatter(), "{0}", e.Value);

        await PersistSolve(puzzleRound.Id, number, formattedValue);
    }

    private string FormatInput(string input)
    {
        var output = string.Format(new SolveTimeFormatter(), "{0}", input);

        return output;
    }

    private async Task SolveUpdatedHandler(Tuple<int, string> result)
    {
        await PersistSolve(puzzleRound.Id, result.Item1, result.Item2);
    }

    private async Task PersistSolve(string roundId, int solveNumber, string solveResult)
    {
        await Store.UpdateSolve(roundId, solveNumber, solveResult);
        await RefreshData();
    }

    private async Task<PersonalBest> GetCurrentPbForPuzzle(string puzzle)
    {
        var pbs = await Store.GetPersonalBestsAsync();
        if(pbs == null)
        {
            return null;
        }
        return pbs.FirstOrDefault(pb => pb.Puzzle == puzzleRound.Puzzle);
    }

    private string GetInclusionClass(int number)
    {
        return calculations.IncludedSolves.Contains(number) ? "table-secondary" : "";
    }

    private string GetCurrentAvgClass()
    {
        var css = "";
        var currAvg = 0f;
        var currPb = 0f;

        if(float.TryParse(calculations.CurrentAverage, out currAvg)
            && float.TryParse(currentPbAverage, out currPb)
            && currAvg < currPb)
        {
            css = "text-light bg-success";
        }

        return css;
    }

    private string GetAverageLabel()
    {
        var label = "Average";

        // Also add 3, 4, 5 blind as mean
        string[] mean = { "6x6", "7x7", "3x3 BLD", "4x4 BLD", "5x5 BLD" };
        if(puzzleRound.Puzzle != null &&  mean.Contains(puzzleRound.Puzzle))
        {
            label = "Mean";
        }

        return label;
    }

    private string GetEncodedBody()
    {
        return "sms:&body=" + SolveEncoder.ToUrlEncode(puzzleRound, calculations);
    }
}