@inject ISolveCalculator Calculator

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Estimate Average</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div>
                    <p>To get</p>
                </div>
                <div class="text-center">
                    <h1 class="display-3">@desiredAverage</h1>
                </div>
                <div>
                    <label></label>
                    <input type="range" class="custom-range" min="@minRange" max="@maxRange" value="@desiredAverage" step="0.01" @oninput="@(e => AverageChanged(e))">
                </div>
                <div>
                    <p>You need</p>
                </div>
                <div class="text-center">
                    <h1 class="display-3">This</h1>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="Close">
                    <span class="oi oi-check"></span> OK
                </button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public Solve[] solves { get; set; }
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private float minRange;
    private float maxRange;
    private float desiredAverage;

    public void Open(SolveCalculations solveCalculations, Solve[] solves, string pb)
    {   
        SetValues();
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void SetValues()
    {
        minRange = 7.0f;
        maxRange = 11.0f;
        desiredAverage = (minRange + maxRange) / 2f;
    }

    private void AverageChanged(ChangeEventArgs e)
    {

    }

    private void SetMinMaxRange()
    {
        @* var convertedSolves = Calculator.GetConvertedSolves(puzzleRound.Solves);

        minRange = (int)(convertedSolves.First().Item2 * 100);
        maxRange = (int)(convertedSolves.Last().Item2 * 100);

        if(convertedSolves.Count() < 4)
        {
            // extend the ranges by 20%
            minRange -= (minRange / 5);
            maxRange += (maxRange / 5);
        } *@
    }
}