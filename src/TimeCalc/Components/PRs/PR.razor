@using TimeCalc.Models

<div class="form-row">
  <div class="form-group col-4">
    <select class="form-control" value="@PersonalRecord.Puzzle">
      @foreach (var puzzle in puzzles)
      {
        <option value="@puzzle">@puzzle</option>
      }
    </select>
  </div>
  <div class="form-group col-4">
    <input type="text" class="form-control" @oninput="OnSingleChanged" value="@PersonalRecord.Single" placeholder="Single" />
  </div>
  <div class="form-group col-4">
    <input type="text" class="form-control" @oninput="OnAverageChanged" value="@PersonalRecord.Average" placeholder="Average" />
  </div>
</div>

@code {
  [Parameter]
  public PersonalRecord PersonalRecord { get; set; }

  [Parameter]
  public EventCallback<PersonalRecord> OnPersonalRecordChanged { get; set; }

  private string[] puzzles = { "2x2", "3x3", "4x4", "5x5", "6x6", "7x7", "Skewb", "Pyraminx", "Megaminx", "3x3 OH", "3x3 BF", "3x3 Feet", "Square-1" };

  private async Task OnPuzzleChanged(ChangeEventArgs e)
  {
    PersonalRecord.Puzzle = e.Value.ToString();
    await OnPersonalRecordChanged.InvokeAsync(PersonalRecord);
  }

  private async Task OnSingleChanged(ChangeEventArgs e)
  {
    PersonalRecord.Single = e.Value.ToString();
    await OnPersonalRecordChanged.InvokeAsync(PersonalRecord);
  }

  private async Task OnAverageChanged(ChangeEventArgs e)
  {
    PersonalRecord.Average = e.Value.ToString();
    await OnPersonalRecordChanged.InvokeAsync(PersonalRecord);
  }
}