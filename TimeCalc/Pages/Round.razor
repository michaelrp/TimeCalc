@page "/rounds/{id}"
@using TimeCalc.Components.Rounds
@inject ILocalStorage Store
@inject ISolveCalculator Calculator

<h4 class="page-header"><NavLink href="rounds" title="Back to rounds" class="text-reset"><span class="oi oi-chevron-left"></span></NavLink> @GetPageHeader()</h4>

@if(puzzleRound != null)
{
    <table class="table table-borderless">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Solve</th>
                <th scope="col">DNF</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var solve in puzzleRound.Solves)
        {
            <tr class="@GetInclusionClass(solve.Number)">
                <td class="align-middle">@solve.Number</td>
                <td><input class="form-control" type="text" value="@solve.Result"></td>
                <td class="align-middle"><input type="checkbox" value="@solve.IsDNF"></td>
            </tr>
        }
        </tbody>
    </table>
    <hr />
    <h5>Averages</h5>
    <div class="form-group">
        <div>
            <strong>Current:</strong> @calculations.CurrentAverage
            <strong>For PB:</strong> @calculations.NeededForNewPB
        </div>
    </div>
    <h5>PBs</h5>
    <div class="form-group">
        <div>
            @if(currentPb != null)
            {
                <strong>Single:</strong> @currentPb.Single
                <strong>Average:</strong> @currentPb.Average
            }
            else
            {
                <div>No personal bests for @puzzleRound.Puzzle</div>
            }
        </div>
    </div>
}

<span></span>

@code {
    [Parameter]
    public string Id { get; set; }
    private PuzzleRound puzzleRound;
    private SolveCalculations calculations;
    private PersonalBest currentPb;

    protected override async Task OnInitializedAsync()
    {
        puzzleRound = await Store.GetPuzzleRoundAsync(Id);
        currentPb = await GetCurrentPbForPuzzle(puzzleRound.Puzzle);
        var pbAverage = currentPb == null ? "" : currentPb.Average;
        calculations = Calculator.GetCalculations(puzzleRound.Solves, pbAverage);
    }

    private async Task<PersonalBest> GetCurrentPbForPuzzle(string puzzle)
    {
        var pbs = await Store.GetPersonalBestsAsync();
        if(pbs == null)
        {
            return null;
        }
        return pbs.FirstOrDefault(pb => pb.Puzzle == puzzleRound.Puzzle);
    }

    private string GetPageHeader()
    {
        if(puzzleRound == null)
        {
            return "";
        }
        return $"{puzzleRound.Puzzle} - {puzzleRound.Name}";
    }

    private string GetInclusionClass(int number)
    {
        return calculations.IncludedSolves.Contains(number) ? "table-success" : "";
    }

}